/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SystemMonitorRouteImport } from './routes/system-monitor'
import { Route as LogsRouteImport } from './routes/logs'
import { Route as AssistantRouteImport } from './routes/assistant'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ThreadsThreadIdRouteImport } from './routes/threads/$threadId'
import { Route as SettingsShortcutsRouteImport } from './routes/settings/shortcuts'
import { Route as SettingsMcpServersRouteImport } from './routes/settings/mcp-servers'
import { Route as SettingsLocalApiServerRouteImport } from './routes/settings/local-api-server'
import { Route as SettingsHttpsProxyRouteImport } from './routes/settings/https-proxy'
import { Route as SettingsHardwareRouteImport } from './routes/settings/hardware'
import { Route as SettingsGeneralRouteImport } from './routes/settings/general'
import { Route as SettingsAppearanceRouteImport } from './routes/settings/appearance'
import { Route as LocalApiServerLogsRouteImport } from './routes/local-api-server/logs'
import { Route as SettingsProvidersIndexRouteImport } from './routes/settings/providers/index'
import { Route as SettingsProvidersProviderNameRouteImport } from './routes/settings/providers/$providerName'

const SystemMonitorRoute = SystemMonitorRouteImport.update({
  id: '/system-monitor',
  path: '/system-monitor',
  getParentRoute: () => rootRouteImport,
} as any)
const LogsRoute = LogsRouteImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => rootRouteImport,
} as any)
const AssistantRoute = AssistantRouteImport.update({
  id: '/assistant',
  path: '/assistant',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ThreadsThreadIdRoute = ThreadsThreadIdRouteImport.update({
  id: '/threads/$threadId',
  path: '/threads/$threadId',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsShortcutsRoute = SettingsShortcutsRouteImport.update({
  id: '/settings/shortcuts',
  path: '/settings/shortcuts',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsMcpServersRoute = SettingsMcpServersRouteImport.update({
  id: '/settings/mcp-servers',
  path: '/settings/mcp-servers',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsLocalApiServerRoute = SettingsLocalApiServerRouteImport.update({
  id: '/settings/local-api-server',
  path: '/settings/local-api-server',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsHttpsProxyRoute = SettingsHttpsProxyRouteImport.update({
  id: '/settings/https-proxy',
  path: '/settings/https-proxy',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsHardwareRoute = SettingsHardwareRouteImport.update({
  id: '/settings/hardware',
  path: '/settings/hardware',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsGeneralRoute = SettingsGeneralRouteImport.update({
  id: '/settings/general',
  path: '/settings/general',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsAppearanceRoute = SettingsAppearanceRouteImport.update({
  id: '/settings/appearance',
  path: '/settings/appearance',
  getParentRoute: () => rootRouteImport,
} as any)
const LocalApiServerLogsRoute = LocalApiServerLogsRouteImport.update({
  id: '/local-api-server/logs',
  path: '/local-api-server/logs',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsProvidersIndexRoute = SettingsProvidersIndexRouteImport.update({
  id: '/settings/providers/',
  path: '/settings/providers/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsProvidersProviderNameRoute =
  SettingsProvidersProviderNameRouteImport.update({
    id: '/settings/providers/$providerName',
    path: '/settings/providers/$providerName',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/assistant': typeof AssistantRoute
  '/logs': typeof LogsRoute
  '/system-monitor': typeof SystemMonitorRoute
  '/local-api-server/logs': typeof LocalApiServerLogsRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/hardware': typeof SettingsHardwareRoute
  '/settings/https-proxy': typeof SettingsHttpsProxyRoute
  '/settings/local-api-server': typeof SettingsLocalApiServerRoute
  '/settings/mcp-servers': typeof SettingsMcpServersRoute
  '/settings/shortcuts': typeof SettingsShortcutsRoute
  '/threads/$threadId': typeof ThreadsThreadIdRoute
  '/settings/providers/$providerName': typeof SettingsProvidersProviderNameRoute
  '/settings/providers': typeof SettingsProvidersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/assistant': typeof AssistantRoute
  '/logs': typeof LogsRoute
  '/system-monitor': typeof SystemMonitorRoute
  '/local-api-server/logs': typeof LocalApiServerLogsRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/hardware': typeof SettingsHardwareRoute
  '/settings/https-proxy': typeof SettingsHttpsProxyRoute
  '/settings/local-api-server': typeof SettingsLocalApiServerRoute
  '/settings/mcp-servers': typeof SettingsMcpServersRoute
  '/settings/shortcuts': typeof SettingsShortcutsRoute
  '/threads/$threadId': typeof ThreadsThreadIdRoute
  '/settings/providers/$providerName': typeof SettingsProvidersProviderNameRoute
  '/settings/providers': typeof SettingsProvidersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/assistant': typeof AssistantRoute
  '/logs': typeof LogsRoute
  '/system-monitor': typeof SystemMonitorRoute
  '/local-api-server/logs': typeof LocalApiServerLogsRoute
  '/settings/appearance': typeof SettingsAppearanceRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/settings/hardware': typeof SettingsHardwareRoute
  '/settings/https-proxy': typeof SettingsHttpsProxyRoute
  '/settings/local-api-server': typeof SettingsLocalApiServerRoute
  '/settings/mcp-servers': typeof SettingsMcpServersRoute
  '/settings/shortcuts': typeof SettingsShortcutsRoute
  '/threads/$threadId': typeof ThreadsThreadIdRoute
  '/settings/providers/$providerName': typeof SettingsProvidersProviderNameRoute
  '/settings/providers/': typeof SettingsProvidersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/assistant'
    | '/logs'
    | '/system-monitor'
    | '/local-api-server/logs'
    | '/settings/appearance'
    | '/settings/general'
    | '/settings/hardware'
    | '/settings/https-proxy'
    | '/settings/local-api-server'
    | '/settings/mcp-servers'
    | '/settings/shortcuts'
    | '/threads/$threadId'
    | '/settings/providers/$providerName'
    | '/settings/providers'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/assistant'
    | '/logs'
    | '/system-monitor'
    | '/local-api-server/logs'
    | '/settings/appearance'
    | '/settings/general'
    | '/settings/hardware'
    | '/settings/https-proxy'
    | '/settings/local-api-server'
    | '/settings/mcp-servers'
    | '/settings/shortcuts'
    | '/threads/$threadId'
    | '/settings/providers/$providerName'
    | '/settings/providers'
  id:
    | '__root__'
    | '/'
    | '/assistant'
    | '/logs'
    | '/system-monitor'
    | '/local-api-server/logs'
    | '/settings/appearance'
    | '/settings/general'
    | '/settings/hardware'
    | '/settings/https-proxy'
    | '/settings/local-api-server'
    | '/settings/mcp-servers'
    | '/settings/shortcuts'
    | '/threads/$threadId'
    | '/settings/providers/$providerName'
    | '/settings/providers/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AssistantRoute: typeof AssistantRoute
  LogsRoute: typeof LogsRoute
  SystemMonitorRoute: typeof SystemMonitorRoute
  LocalApiServerLogsRoute: typeof LocalApiServerLogsRoute
  SettingsAppearanceRoute: typeof SettingsAppearanceRoute
  SettingsGeneralRoute: typeof SettingsGeneralRoute
  SettingsHardwareRoute: typeof SettingsHardwareRoute
  SettingsHttpsProxyRoute: typeof SettingsHttpsProxyRoute
  SettingsLocalApiServerRoute: typeof SettingsLocalApiServerRoute
  SettingsMcpServersRoute: typeof SettingsMcpServersRoute
  SettingsShortcutsRoute: typeof SettingsShortcutsRoute
  ThreadsThreadIdRoute: typeof ThreadsThreadIdRoute
  SettingsProvidersProviderNameRoute: typeof SettingsProvidersProviderNameRoute
  SettingsProvidersIndexRoute: typeof SettingsProvidersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/system-monitor': {
      id: '/system-monitor'
      path: '/system-monitor'
      fullPath: '/system-monitor'
      preLoaderRoute: typeof SystemMonitorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logs': {
      id: '/logs'
      path: '/logs'
      fullPath: '/logs'
      preLoaderRoute: typeof LogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assistant': {
      id: '/assistant'
      path: '/assistant'
      fullPath: '/assistant'
      preLoaderRoute: typeof AssistantRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/threads/$threadId': {
      id: '/threads/$threadId'
      path: '/threads/$threadId'
      fullPath: '/threads/$threadId'
      preLoaderRoute: typeof ThreadsThreadIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/shortcuts': {
      id: '/settings/shortcuts'
      path: '/settings/shortcuts'
      fullPath: '/settings/shortcuts'
      preLoaderRoute: typeof SettingsShortcutsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/mcp-servers': {
      id: '/settings/mcp-servers'
      path: '/settings/mcp-servers'
      fullPath: '/settings/mcp-servers'
      preLoaderRoute: typeof SettingsMcpServersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/local-api-server': {
      id: '/settings/local-api-server'
      path: '/settings/local-api-server'
      fullPath: '/settings/local-api-server'
      preLoaderRoute: typeof SettingsLocalApiServerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/https-proxy': {
      id: '/settings/https-proxy'
      path: '/settings/https-proxy'
      fullPath: '/settings/https-proxy'
      preLoaderRoute: typeof SettingsHttpsProxyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/hardware': {
      id: '/settings/hardware'
      path: '/settings/hardware'
      fullPath: '/settings/hardware'
      preLoaderRoute: typeof SettingsHardwareRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/general': {
      id: '/settings/general'
      path: '/settings/general'
      fullPath: '/settings/general'
      preLoaderRoute: typeof SettingsGeneralRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/appearance': {
      id: '/settings/appearance'
      path: '/settings/appearance'
      fullPath: '/settings/appearance'
      preLoaderRoute: typeof SettingsAppearanceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/local-api-server/logs': {
      id: '/local-api-server/logs'
      path: '/local-api-server/logs'
      fullPath: '/local-api-server/logs'
      preLoaderRoute: typeof LocalApiServerLogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/providers/': {
      id: '/settings/providers/'
      path: '/settings/providers'
      fullPath: '/settings/providers'
      preLoaderRoute: typeof SettingsProvidersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/providers/$providerName': {
      id: '/settings/providers/$providerName'
      path: '/settings/providers/$providerName'
      fullPath: '/settings/providers/$providerName'
      preLoaderRoute: typeof SettingsProvidersProviderNameRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AssistantRoute: AssistantRoute,
  LogsRoute: LogsRoute,
  SystemMonitorRoute: SystemMonitorRoute,
  LocalApiServerLogsRoute: LocalApiServerLogsRoute,
  SettingsAppearanceRoute: SettingsAppearanceRoute,
  SettingsGeneralRoute: SettingsGeneralRoute,
  SettingsHardwareRoute: SettingsHardwareRoute,
  SettingsHttpsProxyRoute: SettingsHttpsProxyRoute,
  SettingsLocalApiServerRoute: SettingsLocalApiServerRoute,
  SettingsMcpServersRoute: SettingsMcpServersRoute,
  SettingsShortcutsRoute: SettingsShortcutsRoute,
  ThreadsThreadIdRoute: ThreadsThreadIdRoute,
  SettingsProvidersProviderNameRoute: SettingsProvidersProviderNameRoute,
  SettingsProvidersIndexRoute: SettingsProvidersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
